import Head from "next/head";
import { useEffect, useState } from "react";
import { baseUrl } from "./api/url";
import Container from "react-bootstrap/Container";
import Button from "react-bootstrap/Button";
import Card from "react-bootstrap/Card";
import Row from "react-bootstrap/Row";
import Col from "react-bootstrap/Col";
import OffcanvasNav from "./components/_nav";
import styles from "../styles/CardBody.module.css";
import Form from "react-bootstrap/Form";
import { FcSearch } from "react-icons/fc";
import Footer from "./components/_footer";
import CardPlaceholder from "./components/_card-placeholder";

const Home = () => {
  const [error, setError] = useState(null);
  const [filteredListings, setFilteredListings] = useState([]);
  const [errorMessage, setErrorMessage] = useState("");
  const [pagination, setPagination] = useState({ limit: 10, offset: 0 });
  const [searchTag, setSearchTag] = useState("");
  const [loading, setLoading] = useState(true);

  const placeholderImage =
    "https://raw.githubusercontent.com/DarioDeLaFuente/dario-de-la-fuente-semester-project-2/main/public/placeholderSP2.png";

  useEffect(() => {
    async function fetchListings() {
      try {
        const queryParams = new URLSearchParams();
        queryParams.append("_tag", searchTag);
        queryParams.append("_active", true);
        queryParams.append("sort", "endsAt");
        queryParams.append("sortOrder", "asc");

        const res = await fetch(
          `${baseUrl}auction/listings?limit=${pagination.limit}&offset=${
            pagination.offset
          }&${queryParams.toString()}`
        );
        if (!res.ok) {
          throw new Error("Failed to fetch podcasts");
        }
        const data = await res.json();
        console.log("data-index", data);

        setFilteredListings(data);
        setLoading(false);
      } catch (error) {
        setError(error);
        setErrorMessage("Not valid");
        setLoading(false);
        return;
      }
    }

    fetchListings();
  }, [pagination, searchTag]);

  const handleSearch = (event) => {
    setSearchTag(event.target.value.trim());
  };
  const handleNextPage = () => {
    setPagination((prevPagination) => ({
      ...prevPagination,
      offset: prevPagination.offset + prevPagination.limit,
    }));
  };

  const handlePreviousPage = () => {
    setPagination((prevPagination) => ({
      ...prevPagination,
      offset: Math.max(0, prevPagination.offset - prevPagination.limit),
    }));
  };
  if (error) {
    //   return <div>An error occurred: {error.message}</div>;
  }

  const handleImageError = (event) => {
    event.target.onerror = null;
    event.target.src = placeholderImage;
  };

  return (
    <>
      <Head>
        <title>Unsigned Market</title>
        <meta name="description" content="Generated by Unsigned Market" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <OffcanvasNav></OffcanvasNav>
      <div class="container-sm">
        {errorMessage && <p className="error">{errorMessage}</p>}
        <Form className="d-flex">
          <Form.Control
            type="search"
            placeholder="Search for cat or art"
            className="me-2"
            aria-label="Search"
            onChange={handleSearch}
          />
          <FcSearch className="search" />
        </Form>
      </div>
      <Container>
        <Row xs={1}>
          <Col>
            <h1 className="mt-5">Recommendations for you</h1>
          </Col>
        </Row>
        <Row xs={1} md={3} className="center-mobile">
          {loading ? (
            <>
              {[...Array(10)].map((x, i) => (
                <CardPlaceholder key={i} />
              ))}
            </>
          ) : (
            <>
              {!filteredListings.length && <p>No result found</p>}
              {Array.isArray(filteredListings) &&
                filteredListings.map((listings, index) => {
                  return (
                    <Card className={styles.card} key={index}>
                      <Card.Link className={styles.link} href={`/post/${listings.id}`}>
                        <Card.Img
                          className={styles.cardImg}
                          variant="top"
                          src={`${listings.media.length ? listings.media : placeholderImage}`}
                          onError={handleImageError}
                          alt={listings.title}
                        />
                        <Card.Body className={styles.cardbody}>
                          {listings.title && <Card.Title>{listings.title}</Card.Title>}
                          <div className={styles.subtitleWrapper}>
                            <Card.Subtitle className={styles.tags}>{listings.tags}</Card.Subtitle>
                            <Card.Subtitle className={styles.bidsSubtitle}>
                              Bids:{listings._count.bids}
                            </Card.Subtitle>
                            <Card.Subtitle className={styles.descriptionSubtitle}>
                              {listings.description}
                            </Card.Subtitle>
                            <Card.Subtitle className={styles.endsAtSubtitle}>
                              {new Date(listings.endsAt).toLocaleString()}
                            </Card.Subtitle>
                          </div>
                        </Card.Body>
                      </Card.Link>
                    </Card>
                  );
                })}
            </>
          )}
        </Row>
        <Row>
          <Col className="text-center mt-4">
            <Button
              variant="primary"
              onClick={handlePreviousPage}
              disabled={pagination.offset === 0}
            >
              Previous Page
            </Button>{" "}
            <Button
              variant="primary"
              onClick={handleNextPage}
              disabled={filteredListings.length < pagination.limit}
            >
              Next Page
            </Button>
          </Col>
        </Row>
      </Container>
      <Footer />
    </>
  );
};

export default Home;
